# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aioqzone
# This file is distributed under the same license as the aioqzone-feed
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aioqzone-feed \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-30 21:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/type.rst:2
msgid "aioqzone-feed Types"
msgstr ""

#: aioqzone_feed.type.FeedContent:1 of
msgid ""
"FeedContent is feed with contents. This might be the common structure to represent a feed as "
"what it's known."
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.curkey:1 of
msgid "The identifier to this feed. May be a url, or just a identifier string."
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.forward:1 of
msgid "unikey to the feed, or the content itself."
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.topicId:1 of
msgid ""
"This is used to reply to this feed, or can be used to update this feed if current user own this "
"feed."
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.unikey:1 of
msgid ""
"The identifier to the original content. May be a url in all kinds (sometimes not strictly in a "
"correct format, but it is from the meaning)"
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.fid:1 of
msgid "Feed id, a hex string with 24/32 chars, or a much shorter placeholder."
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.fid:4 of
msgid ""
"fid is not a enough identifier for ANY feed. For comman feed that appid==311, it is a 24 or 32 "
"length hex string, which might be satisfied. But for shares that appid!=311, it is a short "
"string and is commonly used by multiple shares. So do not distinguish all feeds on this field."
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.abstime:1 of
msgid "Feed created time. common alias: `created_time`"
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.uin:1 of
msgid "Feed owner :external+aioqzone:term:`uin`."
msgstr ""

#: ../../../docstring aioqzone_feed.type.FeedContent.nickname:1 of
msgid "Feed owner nickname."
msgstr ""

#~ msgid "Fields"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`entities (Optional[List[aioqzone.type.entity.ConEntity]]) "
#~ "<aioqzone_feed.type.BaseDetail.entities>`"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`forward (Optional[Union[pydantic.networks.HttpUrl, str, "
#~ "aioqzone_feed.type.BaseFeed]]) <aioqzone_feed.type.BaseDetail.forward>`"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`media (Optional[List[aioqzone_feed.type.VisualMedia]]) "
#~ "<aioqzone_feed.type.BaseDetail.media>`"
#~ msgstr ""

#~ msgid "unikey to the feed, or the content itself."
#~ msgstr ""

#~ msgid "FeedModel is a model for storing a feed, with the info to hashing and retrieving the feed."
#~ msgstr ""

#~ msgid "Config"
#~ msgstr ""

#~ msgid "**orm_mode**: *bool = True*"
#~ msgstr ""

#~ msgid ":py:obj:`abstime (int) <aioqzone_feed.type.BaseFeed.abstime>`"
#~ msgstr ""

#~ msgid ":py:obj:`appid (int) <aioqzone_feed.type.BaseFeed.appid>`"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`curkey (Optional[Union[pydantic.networks.HttpUrl, str]]) "
#~ "<aioqzone_feed.type.BaseFeed.curkey>`"
#~ msgstr ""

#~ msgid ":py:obj:`fid (str) <aioqzone_feed.type.BaseFeed.fid>`"
#~ msgstr ""

#~ msgid ":py:obj:`nickname (str) <aioqzone_feed.type.BaseFeed.nickname>`"
#~ msgstr ""

#~ msgid ":py:obj:`topicId (str) <aioqzone_feed.type.BaseFeed.topicId>`"
#~ msgstr ""

#~ msgid ":py:obj:`typeid (int) <aioqzone_feed.type.BaseFeed.typeid>`"
#~ msgstr ""

#~ msgid ":py:obj:`uin (int) <aioqzone_feed.type.BaseFeed.uin>`"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`unikey (Optional[Union[pydantic.networks.HttpUrl, str]]) "
#~ "<aioqzone_feed.type.BaseFeed.unikey>`"
#~ msgstr ""

#~ msgid "Feed created time. common alias: `created_time`"
#~ msgstr ""

#~ msgid "The identifier to this feed. May be a url, or just a identifier string."
#~ msgstr ""

#~ msgid "Feed id, a hex string with 24/32 chars, or a much shorter placeholder."
#~ msgstr ""

#~ msgid ""
#~ "fid is not a enough identifier for ANY feed."
#~ " For comman feed that appid==311, it is a "
#~ "24 or 32 length hex string, which might be"
#~ " satisfied. But for shares that appid!=311, it "
#~ "is a short string and is commonly used by "
#~ "multiple shares. So do not distinguish all feeds"
#~ " on this field."
#~ msgstr ""

#~ msgid "Feed owner nickname."
#~ msgstr ""

#~ msgid ""
#~ "This is used to reply to this feed, or "
#~ "can be used to update this feed if current"
#~ " user own this feed."
#~ msgstr ""

#~ msgid "Feed owner uin. (hostuin)"
#~ msgstr ""

#~ msgid ""
#~ "The identifier to the original content. May be "
#~ "a url in all kinds (sometimes not strictly in"
#~ " a correct format, but it is from the "
#~ "meaning)"
#~ msgstr ""

#~ msgid ""
#~ "FeedContent is feed with contents. This might be"
#~ " the common structure to represent a feed as "
#~ "what it's known."
#~ msgstr ""

#~ msgid ":py:obj:`islike (int) <aioqzone_feed.type.FeedContent.islike>`"
#~ msgstr ""

#~ msgid ":py:obj:`height (int) <aioqzone_feed.type.VisualMedia.height>`"
#~ msgstr ""

#~ msgid ":py:obj:`is_video (bool) <aioqzone_feed.type.VisualMedia.is_video>`"
#~ msgstr ""

#~ msgid ":py:obj:`raw (pydantic.networks.HttpUrl) <aioqzone_feed.type.VisualMedia.raw>`"
#~ msgstr ""

#~ msgid ":py:obj:`thumbnail (pydantic.networks.HttpUrl) <aioqzone_feed.type.VisualMedia.thumbnail>`"
#~ msgstr ""

#~ msgid ":py:obj:`width (int) <aioqzone_feed.type.VisualMedia.width>`"
#~ msgstr ""

#~ msgid "Constraints"
#~ msgstr ""

#~ msgid "**minLength** = 1"
#~ msgstr ""

#~ msgid "**maxLength** = 2083"
#~ msgstr ""

#~ msgid "**format** = uri"
#~ msgstr ""

#~ msgid "**keep_untouched**: *tuple = (<class 'functools.singledispatchmethod'>,)*"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`entities (List[aioqzone.type.entity.ConEntity]) "
#~ "<aioqzone_feed.type.BaseDetail.entities>`"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`forward (pydantic.networks.HttpUrl | str | "
#~ "aioqzone_feed.type.BaseFeed | None) "
#~ "<aioqzone_feed.type.BaseDetail.forward>`"
#~ msgstr ""

#~ msgid ":py:obj:`media (List[aioqzone_feed.type.VisualMedia]) <aioqzone_feed.type.BaseDetail.media>`"
#~ msgstr ""

#~ msgid ":py:obj:`curkey (pydantic.networks.HttpUrl | str | None) <aioqzone_feed.type.BaseFeed.curkey>`"
#~ msgstr ""

#~ msgid ":py:obj:`unikey (pydantic.networks.HttpUrl | str | None) <aioqzone_feed.type.BaseFeed.unikey>`"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`thumbnail (pydantic.networks.HttpUrl | None) "
#~ "<aioqzone_feed.type.VisualMedia.thumbnail>`"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ":py:obj:`None`"
#~ msgstr ""

#~ msgid "classmethod(function) -> method"
#~ msgstr ""

#~ msgid "Convert a function to be a class method."
#~ msgstr ""

#~ msgid ""
#~ "A class method receives the class as implicit "
#~ "first argument, just like an instance method "
#~ "receives the instance. To declare a class method,"
#~ " use this idiom:"
#~ msgstr ""

#~ msgid "class C:"
#~ msgstr ""

#~ msgid "@classmethod def f(cls, arg1, arg2, ...):"
#~ msgstr ""

#~ msgid "..."
#~ msgstr ""

#~ msgid ""
#~ "It can be called either on the class (e.g."
#~ " C.f()) or on an instance (e.g. C().f()).  The"
#~ " instance is ignored except for its class. If"
#~ " a class method is called for a derived "
#~ "class, the derived class object is passed as "
#~ "the implied first argument."
#~ msgstr ""

#~ msgid ""
#~ "Class methods are different than C++ or Java "
#~ "static methods. If you want those, see the "
#~ "staticmethod builtin."
#~ msgstr ""
